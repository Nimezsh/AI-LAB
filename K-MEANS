Experiment 08: Solving K-Means clustering (k=2) for Points:
(1,1),(1,2),(4,3),(5,4),(9,8),(10,8)

 

CODE-

# --- Import Libraries ---
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
 
# --- Data ---
points = np.array([[1, 1], [1, 2], [4, 3], [5, 4], [9, 8], [10, 8]], dtype=float)
 
labels_names = [f"({int(x)},{int(y)})" for x,y in points]
 
# -- KMeans ---
 
kmeans = KMeans(n_clusters=2, n_init=10, random_state=42)
kmeans.fit(points)
 
labels = kmeans.labels_
centroids = kmeans.cluster_centers_
inertia = kmeans.inertia_
 
# --- Print Results ---
 
print("Centroids: ")
for i,c in enumerate(centroids):
   print(f" c{i}: ({c[0]:.2f}, {c[1]:.2f})")
print("\nAssignments (point -> cluster): ")
for name, lab in zip(labels_names, labels):
 print(f" {name}: c{lab}")
 
print(f"\nInertia: {inertia:.4f}")
 
# --- Plot ---
plt.figure()
plt.scatter(points[:, 0], points[:, 1], s=80, label="Points")
plt.scatter(centroids[:, 0], centroids[:, 1], s=200, marker='X', label="Centroids")
for i, txt in enumerate(labels_names):
 plt.annotate(txt, (points[i,0]+0.1, points[i,1]+0.1), fontsize=9)
plt.title("K-Means (k=2) Clustering")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.tight_layout()
plt.show()
